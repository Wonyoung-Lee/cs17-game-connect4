1. instructions for use, describing how a user would interact with your program (how would someone play your game against a friend? against the AI?)
   1. To use our program, the person must first run it by using npm run build, then node srcReferee on the correct module. Then, the first person would enter in a number corresponding to the column they would like to place their piece in. The opposing player would then do the same. This will continue until the game is won or drawn.
   2. In the case that someone wants to play against the AI, the person must run the program using the same process, but run it using the corresponding AI module. The first player would enter in a number corresponding to the move they want to make, then the AI would make a counter move. This will continue until the game is either won or drawn.
2. an overview of how your program functions, including how all of the pieces fit together
   1. When the Referee program is run, it will start the game. This program will continuously check what the current state of the game is, and return a string indicating whether the game has been won, drawn, or if it is ongoing, whose turn it is. A move will be made by a player. This program will check if the move is a legal move by using legalMoves. If it is not a legal move, it will throw an error. If it is a legal move, the checker piece will then be placed in the indicated column by using putChecker. The program will then check to see if the game has been won by using the checkFour function. This function uses the checkB function, which will add up all the values received from the checkRow function, which assigns values to different combinations of pieces on the board. CheckFour will look at the columns, rows, and diagonals (by using makeDiagonal) to check for a win. The Referee program will also switch between players after every turn. Then, when a move is made, the program will print out both the move that the player made, as well as the new board. The new board is found by using nextState, which takes in the current state, and returns the state after a move has been made. This process will continue until the game is won or drawn.
   2. When the Referee program is run using AI’s, it follows a similar procedure as if two human players were playing. However, the AI’s would be “making moves” based on the nextMove procedure that we wrote. This nextMove procedure utilizes the minmax algorithm which looks ahead a few steps (4 in our program) and sees if that value is favorable to the AIPlayer accordingly to whether it is Player 1 or Player 2. The rest of the program runs similarly to 2 human players playing. For example, the game loop ends if there is a Win or a Draw (which is detected by nextState in Connect4.re). 
3. a description of any possible bugs or problems with your program
   1. When a player has won by getting four in a row in one column, the win will not be announced until the column has been filled
4. a list of the people with whom you collaborated
   1. No one outside of our group (Wonyoung Lee and Kaitlyn Guintu)
5. a description of any extra features you chose to implement
   1. We have not implemented any extra features to the program.